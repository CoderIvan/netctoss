--------------------------GBILL_ALL--------------------------
CREATE OR REPLACE PROCEDURE GBILL_ALL
IS
BEGIN
	--向临时表BILL_CODE表中插入数据
	INSERT INTO BILL_CODE(BILL_ID,ACCOUNT_ID,BILL_MONTH) SELECT SEQ_BILL_ID.nextval,ID, TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM') FROM ACCOUNT;
	
	--向临时表BILL_ITEM_TEMP中插入数据
	INSERT INTO BILL_ITEM_TEMP(BILL_ID,SERVICE_ID,COST)
	SELECT B.BILL_ID,A.SERVICE_ID,A.COST + NVL(C.BASECOST,0)
	FROM BILL_CODE B JOIN (
		SELECT MAX(S.ACCOUNT_ID) ACCOUNT_ID, D.SERVICE_ID, MAX(S.COST_ID) COST_ID, SUM(COST) COST
    FROM SERVICE_DETAIL D JOIN SERVICE S
    ON D.SERVICE_ID = S.ID AND TO_CHAR(D.LOGOUTTIME,'YYYYMM') = TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')
    GROUP BY D.SERVICE_ID
	) A ON B.ACCOUNT_ID = A.ACCOUNT_ID 
	JOIN COST C ON A.COST_ID = C.ID;
  
	--向表BILL中插入数据
	INSERT INTO BILL(ID,ACCOUNT_ID,BILLMONTH,COST)
	SELECT BC.BILL_ID, MAX(BC.ACCOUNT_ID), MAX(BC.BILL_MONTH), SUM(I.COST)
	FROM BILL_CODE BC JOIN BILL_ITEM_TEMP I ON BC.BILL_ID = I.BILL_ID
	GROUP BY BC.BILL_ID;
  
	--向表BILL_ITEM中插入数据
	INSERT INTO BILLITEM(ID,BILL_ID,SERVICE_ID,COST)
		SELECT SEQ_BILLITEM_ID.nextval,B.BILL_ID,A.SERVICE_ID,A.COST + NVL(C.BASECOST,0)
		FROM BILL_CODE B JOIN (
	      SELECT MAX(S.ACCOUNT_ID) ACCOUNT_ID,D.SERVICE_ID,MAX(S.COST_ID) COST_ID,SUM(COST) COST
	      FROM SERVICE_DETAIL D  JOIN SERVICE S
	      ON D.SERVICE_ID = S.ID
	      AND TO_CHAR(D.LOGOUTTIME,'YYYYMM') = TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')
	      GROUP BY D.SERVICE_ID
	    ) A ON B.ACCOUNT_ID = A.ACCOUNT_ID
	JOIN COST C ON A.COST_ID = C.ID;
COMMIT;
END;
--------------------------GBILL_ALL--------------------------

--------------------------UPDATE_SERVICE_COST--------------------------
CREATE OR REPLACE PROCEDURE UPDATE_SERVICE_COST
IS
BEGIN
  MERGE INTO SERVICE S
  USING SERVICE_UPDATE_BAK S_BAK
  ON (S.ID = S_BAK.SERVICEID)
  WHEN MATCHED THEN
    UPDATE SET s.cost_id=s_bak.costid;
    DELETE FROM SERVICE_UPDATE_BAK;
COMMIT;
END;
--------------------------UPDATE_SERVICE_COST--------------------------

--------------------------GEN_FEE--------------------------
CREATE OR REPLACE TRIGGER GEN_FEE
BEFORE INSERT ON SERVICE_DETAIL
FOR EACH ROW
DECLARE
  TYPE T_COST IS RECORD (
    BASE_COST COST.BASECOST%TYPE,
    BASE_DURATION COST.BASEDURATION%TYPE,
    UNIT_COST COST.UNITCOST%TYPE,
    COST_TYPE COST.COSTTYPE%TYPE
  );
  V_COST T_COST;
  V_SOFAR_DURATION MONTH_DURATION.SOFAR_DURATION%TYPE;
  V_TEMP_DURATION MONTH_DURATION.SOFAR_DURATION%TYPE;
  V_DURATION SERVICE_DETAIL.DURATION%TYPE;
  V_COUNT NUMBER(20);
BEGIN
	-- 生成主键
	SELECT SERVICE_DETAIL_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
	-- 计算使用时延
	:NEW.DURATION := ROUND(TO_NUMBER(:NEW.LOGOUTTIME-:NEW.LOGINTIME)*24*60*60);
	-- 定位service_id的资费标准
	SELECT BASECOST,BASEDURATION,UNITCOST,COSTTYPE INTO V_COST FROM COST C JOIN SERVICE S ON S.COST_ID = C.ID AND S.ID = :NEW.SERVICE_ID;
	--2表示资费类型为套餐
	IF V_COST.COST_TYPE=2 THEN
		--查询为了判断month_duration表中是否有当前月的数据
		SELECT COUNT(*) INTO V_COUNT FROM MONTH_DURATION WHERE SERVICE_ID = :NEW.SERVICE_ID AND MONTH_ID = TO_CHAR(:NEW.LOGOUTTIME,'yyyymm');
		--在month_duration表中已经存在当前月的数据
		IF V_COUNT>0 THEN
			-- 获得service_id当月累计时长
			SELECT SOFAR_DURATION INTO V_SOFAR_DURATION FROM MONTH_DURATION WHERE SERVICE_ID = :NEW.SERVICE_ID AND MONTH_ID = TO_CHAR(:NEW.LOGOUTTIME,'yyyymm');
			-- 到目前为止的累计时长
			V_TEMP_DURATION:=V_SOFAR_DURATION;
			--加上当前这次的duration
			V_SOFAR_DURATION := V_SOFAR_DURATION + :NEW.DURATION;
			-- 和基本时长的差
			V_DURATION := V_SOFAR_DURATION - V_COST.BASE_DURATION*60*60;
			--当前插入的service_detail的数据部分时长大于包月时长
			IF V_DURATION > 0 AND V_COST.BASE_DURATION*60*60> V_TEMP_DURATION THEN :NEW.COST := V_COST.UNIT_COST * V_DURATION/3600;
			--当前插入的service_detail的数据全部时长大于包月时长
			ELSIF V_DURATION > 0 AND V_COST.BASE_DURATION*60*60<= V_TEMP_DURATION THEN :NEW.COST :=V_COST.UNIT_COST * :NEW.DURATION/3600;   
			END IF;
			--使month_duration表中的当前月时长进行累加
			UPDATE MONTH_DURATION SET SOFAR_DURATION=V_SOFAR_DURATION WHERE SERVICE_ID = :NEW.SERVICE_ID AND MONTH_ID = TO_CHAR(:NEW.LOGOUTTIME,'yyyymm') ;
		--在month_duration表中已经不存在当前月的数据
		ELSE
			V_SOFAR_DURATION := :NEW.DURATION;
			INSERT INTO MONTH_DURATION(SERVICE_ID,MONTH_ID,SERVICE_DETAIL_ID,SOFAR_DURATION) VALUES (:NEW.SERVICE_ID,TO_CHAR(:NEW.LOGOUTTIME,'yyyymm'),:NEW.ID,V_SOFAR_DURATION); 
		END IF;
	--1表示资费类型为计时费用
	ELSIF V_COST.COST_TYPE=3 THEN :NEW.COST :=V_COST.UNIT_COST*(:NEW.DURATION/3600); 
	ELSIF V_COST.COST_TYPE=1 THEN :NEW.COST := 0; 
	END IF;    
END;
--------------------------GEN_FEE--------------------------